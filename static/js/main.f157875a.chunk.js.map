{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","constants.js","ErrorBoundry.js","App.js","actions.js","reducers.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","website","id","className","alt","src","CardList","robots","cardComponent","map","user","i","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCESS","REQUEST_ROBOTS_FAILED","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","console","log","store","document","title","onRequestRobots","searchField","onSearchChange","isPending","filterRobotsName","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","initialStateSearch","initialStateRobots","Boolean","window","location","hostname","match","logger","createLogger","rootReducer","combineReducers","action","Object","assign","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f157875a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) =>{\r\n\tconst { name, email, website, id} = props;\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img alt='robot' src={`https://robohash.org/${id}?size=200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2 className='f5'>{name}</h2>\r\n\t\t\t\t<p className='f6'>{email}</p>\r\n\t\t\t\t<p2 className='f6'>{website}</p2>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots}) =>{\r\n\tconst cardComponent = robots.map((user, i) => {\r\n\t\treturn <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} website={robots[i].website} />\r\n\t})\r\n\treturn(\r\n\t<div>\r\n\t\t{cardComponent}\r\n    </div>\r\n\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='tc pa2'>\r\n\t\t<input\r\n\t\tclassName ='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype='search' placeholder='search robots' \r\n\t\tonChange={searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t);\r\n\t\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{ overflowY: 'scroll', border: '2px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\r\n","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props){\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidCatch(error, info){\r\n\t\tthis.setState({ hasError: true})\r\n\t}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError){\r\n\t\t\treturn <h1>Ooooops. That is not good</h1>\r\n\t\t}\r\n\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component} from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\nimport { setSearchField, requestRobots } from './actions';\r\n// import {robots} from './robots';\r\nimport './App.css';\r\nimport ErrorBoundry from './ErrorBoundry';\r\n\r\n// const state ={\r\n// \trobots: robots,\r\n// \tsearchfield: ''\r\n// }\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\terror: state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => dispatch(requestRobots())\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\t// constructor(){\r\n\t// \tsuper()\r\n\t// \tthis.state = {\r\n\t// \t\trobots: [],\r\n\t// \t\t// searchfield: ''\r\n\t// \t}\r\n\t// }\r\n\tcomponentDidMount() {\r\n\t\tconsole.log(this.props.store)\r\n\t\tdocument.title = \"RoboRedux\"\r\n\t\tthis.props.onRequestRobots();\r\n\t\t// fetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t// \t.then(response => {\r\n\t\t// \treturn response.json();\r\n\t\t// })\r\n\t\t// .then(users => {\r\n\t\t// \tthis.setState({ robots:users })\r\n\t\t// })\r\n\t\t// this.setState({ robots: robots});\r\n\t}\r\n\t// onSearchChange = (event) => {\r\n\t// \tthis.setState({ searchfield: event.target.value})\r\n\t// }\r\n\trender(){\r\n\t\t// const { robots } = this.state;\r\n\t\tconst { searchField, onSearchChange, robots, isPending} = this.props;\r\n\t\tconst filterRobotsName = robots.filter(robots => {\r\n\t\t\tif (robots.name.toLowerCase().includes(searchField.toLowerCase()))\r\n\t\t\t{\r\n\t\t\t\treturn robots.name;\r\n\t\t\t}\r\n\r\n\t\t\telse if (robots.email.toLowerCase().includes(searchField.toLowerCase()))\r\n\t\t\t{\r\n\t\t\t\treturn robots.email;\r\n\t\t\t}\t\r\n\t\t\telse if (robots.website.toLowerCase().includes(searchField.toLowerCase()))\r\n\t\t\t{\r\n\t\t\t\treturn robots.website;\r\n\t\t\t}\t\r\n\t\t\telse{\r\n\t\t\t\treturn '';\r\n\t\t\t}\r\n\t\t})\r\n\tif (isPending)\r\n\t\t{ \r\n\t\t\treturn <h1 className='tc'>Loading</h1>\r\n\t\t}\r\n\telse {\r\n\tif (filterRobotsName == '')\r\n\t{\r\n\t\treturn(\r\n\t\t\t<div className='tc'>\t\r\n\t\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<p1>Search found no robots</p1>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t)\r\n\t}else {\t\t\r\n\treturn(\r\n\t\t<div className='tc'>\t\r\n\t\t\t<h1 className='f1'>RoboFriends</h1>\r\n\t\t\t<SearchBox searchChange={onSearchChange}/>\r\n\t\t\t<Scroll>\r\n\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t<CardList robots={filterRobotsName}/>\r\n\t\t\t\t</ErrorBoundry>\r\n\t\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n\t}\r\n\t}\r\n\t}\r\n}\r\n\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: 'CHANGE_SEARCH_FIELD',\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING})\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => dispatch ({ type: REQUEST_ROBOTS_SUCESS, payload: data}))\r\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\r\n}","import { \r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constants.js'\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state = initialStateSearch, action ={}) => {\r\n\tconsole.log(action.type)\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD: \r\n\t\t\treturn Object.assign({}, state, { searchField:action.payload })\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING: \r\n\t\t\treturn Object.assign({}, state, { isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { searchRobots, requestRobots } from './reducers';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\n//import App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons';\r\n\r\nconst logger = createLogger();\r\n\r\nconst rootReducer = combineReducers ({ searchRobots, requestRobots})\r\n\r\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger))\r\n\r\nReactDOM.render( \r\n\t<Provider store={store}>\r\n\t  <React.StrictMode>\r\n\t   \t<App/>\r\n\t  </React.StrictMode>\r\n\t  </Provider>, \r\n\t  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}